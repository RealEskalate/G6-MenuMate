{
  "info": {
    "_postman_id": "menumate-api-v1",
    "name": "MenuMate API v1 - Comprehensive Collection",
  "description": "Complete API documentation for MenuMate Backend - A restaurant management and discovery platform.\n\n## Overview\nMenuMate is a comprehensive restaurant management system that allows restaurant owners to manage restaurants, menus, staff, and for customers to discover and review places.\n\n## Base URL\n`http://localhost:8080/api/v1`\n\n## Authentication\nMost endpoints require JWT authentication. Send the access token via Authorization header or cookies.\n\n- Header: `Authorization: Bearer <access_token>`\n- Cookies: `access_token` and `refresh_token` are set by the server when you login/register.\n\n## API Versioning\nAll endpoints are prefixed with `/api/v1`.\n\n## Errors\nStandard error format:\n```json\n{\n  \"message\": \"Error description\",\n  \"error\": \"Detailed error information (optional)\"\n}\n```\n\n## Success\nStandard success format may be either:\n```json\n{ \"message\": \"Operation completed successfully\", \"data\": { ... } }\n```\nOR an object payload (e.g., login returns tokens).",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "menumate-team"
  },
  "item": [
    {
      "name": "Authentication",
      "description": "User authentication and authorization endpoints including registration, login, password management, and OAuth integration.",
      "item": [
        {
          "name": "Public Auth",
          "description": "Authentication endpoints that don't require authorization",
          "item": [
            {
              "name": "Register User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securepassword123\",\n  \"auth_provider\": \"EMAIL\",\n  \"first_name\": \"John\",\n  \"last_name\": \"Doe\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/register",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "register"]
                },
                "description": "Register a new user account.\n\n**Registration Rules:**\nYou MUST provide: \n- `username` (unique)\n- `password`\n- Either `email` OR `phone_number` (at least one)\n- `auth_provider` must match the primary credential used: `EMAIL` when using email, `PHONE` when using phone-only signup, `GOOGLE` for OAuth flow.\n\n**Request Body Fields (Standard Email Registration):**\n- `username` (string, required): 3-50 alphanumeric characters\n- `email` (string, required if auth_provider=EMAIL): Valid email address\n- `phone_number` (string, required if auth_provider=PHONE): E.164 format (e.g. +15551234567)\n- `password` (string, required): 6-100 characters\n- `auth_provider` (string, required): One of `EMAIL`, `PHONE`, `GOOGLE`\n- `first_name` (string, optional): 2-50 alphabetic characters\n- `last_name` (string, optional): 2-50 alphabetic characters\n- `role` (string, optional): One of `CUSTOMER`, `OWNER`, `MANAGER`, `STAFF`, `ADMIN` (defaults to `CUSTOMER`)\n\n**Examples:**\n_Email Based:_\n```json\n{\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"securepassword123\",\n  \"auth_provider\": \"EMAIL\"\n}\n```\n_Phone Based:_\n```json\n{\n  \"username\": \"janedoe\",\n  \"phone_number\": \"+15551234567\",\n  \"password\": \"securepassword123\",\n  \"auth_provider\": \"PHONE\"\n}\n```\n\n**Conflict Handling (409):**\n- `username already exists`\n- `email already exists`\n- `phone number already exists`\n\n**Response:** Returns created user object without password hash."
              },
              "response": []
            },
            {
              "name": "Login User",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"identifier\": \"john.doe@example.com\",\n  \"password\": \"securepassword123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/login",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "login"]
                },
                "description": "Authenticate user and get access tokens.\n\n**Request Body Fields:**\n- `identifier` (string, required): May be a username, email address, or phone number\n- `password` (string, required): 6-100 characters\n\n**Response:**\n```json\n{\n  \"access_token\": \"jwt_access_token\",\n  \"refresh_token\": \"jwt_refresh_token\"\n}\n```\n\n**Notes:**\n- Access tokens expire in ~15 minutes (configurable)\n- Refresh tokens expire in ~7 days (configurable)\n- Use any unique identifier you registered with (username/email/phone)\n- 401 returned for invalid credentials"
              },
              "response": [
                {
                  "name": "200 OK",
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    { "key": "Content-Type", "value": "application/json" }
                  ],
                  "body": "{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}"
                },
                {
                  "name": "401 Unauthorized",
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "json",
                  "header": [ { "key": "Content-Type", "value": "application/json" } ],
                  "body": "{\n  \"message\": \"invalid credentials\",\n  \"error\": \"username/email or password is incorrect\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('returns tokens', function () {",
                      "  const json = pm.response.json();",
                      "  pm.expect(json).to.have.property('access_token');",
                      "  pm.expect(json).to.have.property('refresh_token');",
                      "});",
                      "// store for subsequent requests",
                      "if (pm.response.code === 200) {",
                      "  const json = pm.response.json();",
                      "  pm.environment.set('access_token', json.access_token);",
                      "  pm.environment.set('refresh_token', json.refresh_token);",
                      "  const expiryTime = new Date().getTime() + (15 * 60 * 1000);",
                      "  pm.environment.set('token_expiry', expiryTime.toString());",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Refresh Token",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refresh_token\": \"{{refresh_token}}\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/refresh",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "refresh"]
                },
                "description": "Get new access and refresh tokens using a valid refresh token.\n\n**Request Body Fields:**\n- `refresh_token` (string, required): Valid refresh token\n\n**Response:**\n```json\n{\n  \"access_token\": \"new_jwt_access_token\",\n  \"refresh_token\": \"new_jwt_refresh_token\"\n}\n```\n\n**Error Responses:**\n- `401`: Invalid or expired refresh token\n- `400`: Missing refresh token"
              },
              "response": [
                {
                  "name": "200 OK",
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [ { "key": "Content-Type", "value": "application/json" } ],
                  "body": "{\n  \"access_token\": \"new_access_token...\",\n  \"refresh_token\": \"new_or_same_refresh_token...\"\n}"
                },
                {
                  "name": "401 Unauthorized",
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "json",
                  "header": [ { "key": "Content-Type", "value": "application/json" } ],
                  "body": "{\n  \"message\": \"invalid or expired token\",\n  \"error\": \"token revoked or expired\"\n}"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "type": "text/javascript",
                    "exec": [
                      "pm.test('returns access token', function () {",
                      "  const json = pm.response.json();",
                      "  pm.expect(json).to.have.property('access_token');",
                      "});",
                      "if (pm.response.code === 200) {",
                      "  const json = pm.response.json();",
                      "  pm.environment.set('access_token', json.access_token);",
                      "  if (json.refresh_token) pm.environment.set('refresh_token', json.refresh_token);",
                      "  const expiryTime = new Date().getTime() + (15 * 60 * 1000);",
                      "  pm.environment.set('token_expiry', expiryTime.toString());",
                      "}"
                    ]
                  }
                }
              ]
            },
            {
              "name": "Forgot Password",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"john.doe@example.com\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/forgot-password",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "forgot-password"]
                },
                "description": "Send password reset email to user.\n\n**Request Body Fields:**\n- `email` (string, required): Valid email address\n\n**Response:**\n```json\n{\n  \"message\": \"Password reset email sent successfully\"\n}\n```\n\n**Notes:**\n- Reset tokens expire in 10 minutes (configurable)\n- Email will contain a reset link with token\n- No error returned if email doesn't exist (security measure)"
              },
              "response": [
                {
                  "name": "200 OK",
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [ { "key": "Content-Type", "value": "application/json" } ],
                  "body": "{\n  \"message\": \"Password reset email sent successfully\"\n}"
                }
              ]
            },
            {
              "name": "Reset Password",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"john.doe@example.com\",\n  \"token\": \"password_reset_token_from_email\",\n  \"new_password\": \"newSecurePassword123\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/reset-password",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "reset-password"]
                },
                "description": "Reset user password using reset token.\n\n**Request Body Fields:**\n- `email` (string, required): User's email address\n- `token` (string, required): Reset token from email\n- `new_password` (string, required): New password (minimum 6 characters)\n\n**Response:**\n```json\n{\n  \"message\": \"Password reset successfully\"\n}\n```\n\n**Error Responses:**\n- `400`: Invalid or expired token\n- `404`: User not found"
              },
              "response": [
                {
                  "name": "200 OK",
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [ { "key": "Content-Type", "value": "application/json" } ],
                  "body": "{\n  \"message\": \"Password reset successfully\"\n}"
                }
              ]
            },
            {
              "name": "Logout",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/logout",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "logout"]
                },
                "description": "Logout user and invalidate refresh tokens.\n\n**Response:**\n```json\n{\n  \"message\": \"Logged out successfully\"\n}\n```\n\n**Notes:**\n- Invalidates all refresh tokens for the user\n- Access tokens will still be valid until expiry (stateless)"
              },
              "response": [
                {
                  "name": "200 OK",
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [ { "key": "Content-Type", "value": "application/json" } ],
                  "body": "{\n  \"message\": \"success\"\n}"
                }
              ]
            }
          ]
        },
        {
          "name": "Google OAuth",
          "description": "Google OAuth2 authentication flow",
          "item": [
            {
              "name": "Google Login Redirect",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/auth/google/login",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "google", "login"]
                },
                "description": "Redirect to Google OAuth2 consent screen.\n\n**Response:**\n- Redirects to Google OAuth consent page\n- User authorizes the application\n- Google redirects to callback URL\n\n**Usage:**\n1. Direct users to this URL in browser\n2. User completes OAuth flow\n3. Google calls the callback endpoint\n4. Application receives tokens"
              },
              "response": []
            },
            {
              "name": "Google OAuth Callback",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{base_url}}/auth/google/callback?code=google_auth_code&state=optional_state",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "google", "callback"],
                  "query": [
                    {
                      "key": "code",
                      "value": "google_auth_code",
                      "description": "Authorization code from Google"
                    },
                    {
                      "key": "state",
                      "value": "optional_state",
                      "description": "Optional state parameter"
                    }
                  ]
                },
                "description": "Handle Google OAuth2 callback and authenticate user.\n\n**Query Parameters:**\n- `code` (string, required): Authorization code from Google\n- `state` (string, optional): State parameter for CSRF protection\n\n**Response:**\n```json\n{\n  \"access_token\": \"jwt_access_token\",\n  \"refresh_token\": \"jwt_refresh_token\",\n  \"user\": {\n    \"id\": \"user_id\",\n    \"email\": \"user@gmail.com\",\n    \"username\": \"google_user123\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Doe\",\n    \"auth_provider\": \"GOOGLE\",\n    \"role\": \"CUSTOMER\"\n  }\n}\n```\n\n**Notes:**\n- Creates new user with `auth_provider=GOOGLE` if first-time login\n- Links existing account if the email matches an existing user\n- Username is generated or derived if not provided"
              },
              "response": []
            }
          ]
        },
        {
          "name": "Protected Auth",
          "description": "Authentication endpoints that require valid access token",
          "item": [
            {
              "name": "Verify Email Request",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"john.doe@example.com\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/verify-email",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "verify-email"]
                },
                "description": "Send email verification OTP to user.\n\n**Request Body Fields:**\n- `email` (string, required): Valid email address to verify\n\n**Response:**\n```json\n{\n  \"message\": \"Verification email sent successfully\"\n}\n```\n\n**Notes:**\n- Requires valid access token\n- Sends 6-digit OTP to email\n- OTP expires in configured minutes (default: 15 minutes)\n- Maximum attempts limit applies"
              },
              "response": []
            },
            {
              "name": "Resend OTP",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/resend-otp",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "resend-otp"]
                },
                "description": "Resend OTP for email verification.\n\n**Response:**\n```json\n{\n  \"message\": \"OTP resent successfully\"\n}\n```\n\n**Notes:**\n- Requires valid access token\n- Invalidates previous OTP\n- Same expiry and attempt limits apply\n- Rate limiting may apply"
              },
              "response": []
            },
            {
              "name": "Verify OTP",
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{access_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"code\": \"123456\"\n}"
                },
                "url": {
                  "raw": "{{base_url}}/auth/verify-otp",
                  "host": ["{{base_url}}"],
                  "path": ["auth", "verify-otp"]
                },
                "description": "Verify OTP and mark email as verified.\n\n**Request Body Fields:**\n- `code` (string, required): 6-digit OTP code\n\n**Response:**\n```json\n{\n  \"message\": \"Email verified successfully\",\n  \"user\": {\n    \"id\": \"user_id\",\n    \"email\": \"john.doe@example.com\",\n    \"is_verified\": true\n  }\n}\n```\n\n**Error Responses:**\n- `400`: Invalid or expired OTP\n- `429`: Too many attempts\n- `401`: Invalid access token"
              },
              "response": []
            }
          ]
        }
      ]
    },
    {
      "name": "System",
      "description": "System level endpoints (health, diagnostics)",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "url": { "raw": "{{base_url}}/health", "host": ["{{base_url}}"], "path": ["health"] },
            "description": "Returns overall system health and component statuses (currently database)."
          },
          "response": []
        }
      ]
    },
    {
      "name": "OCR",
      "description": "OCR job submission and status endpoints for extracting menu data.",
      "item": [
        {
          "name": "Create OCR Job",
          "request": {
            "method": "POST",
            "header": [ { "key": "Content-Type", "value": "application/json" } ],
            "url": { "raw": "{{base_url}}/ocr-jobs", "host": ["{{base_url}}"], "path": ["ocr-jobs"] },
            "body": { "mode": "raw", "raw": "{\n  \"image_url\": \"https://example.com/menu.jpg\"\n}" },
            "description": "Submit a new OCR job by providing an image URL of a menu."
          },
          "response": []
        },
        {
          "name": "Get OCR Job",
          "request": {
            "method": "GET",
            "url": { "raw": "{{base_url}}/ocr-jobs/:jobId", "host": ["{{base_url}}"], "path": ["ocr-jobs", ":jobId"], "variable": [{"key":"jobId","value":"job_id"}] },
            "description": "Fetch OCR job status and extracted data if completed."
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "description": "User profile and account management endpoints",
      "item": [
        {
          "name": "Update Profile",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "first_name",
                  "value": "John",
                  "description": "First name (2-50 alphabetic characters)",
                  "type": "text"
                },
                {
                  "key": "last_name",
                  "value": "Smith",
                  "description": "Last name (2-50 alphabetic characters)",
                  "type": "text"
                },
                {
                  "key": "bio",
                  "value": "Updated bio - Food enthusiast and restaurant critic",
                  "description": "User biography (max 500 characters)",
                  "type": "text"
                },
                {
                  "key": "avatar",
                  "description": "Profile picture file (optional)",
                  "type": "file",
                  "disabled": true
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/users/update-profile",
              "host": ["{{base_url}}"],
              "path": ["users", "update-profile"]
            },
            "description": "Update user profile basic information and optional profile image.\n\n**Form Fields:**\n- `first_name` (string, optional): 2-50 alphabetic characters\n- `last_name` (string, optional): 2-50 alphabetic characters\n- `bio` (string, optional / legacy - currently ignored if provided)\n- `avatar` (file, optional): Profile image file (mapped to `profile_image` URL after upload)\n\n**Supported File Types:**\n- JPEG, PNG, GIF\n- Max size: 5MB\n\n**Response:**\n```json\n{\n  \"message\": \"Profile updated successfully\",\n  \"data\": {\n    \"id\": \"user_id\",\n    \"username\": \"johndoe\",\n    \"email\": \"john.doe@example.com\",\n    \"first_name\": \"John\",\n    \"last_name\": \"Smith\",\n    \"profile_image\": \"https://storage.example.com/profile/johndoe.jpg\",\n    \"updated_at\": \"2024-01-15T10:30:00Z\"\n  }\n}\n```"
          },
          "response": []
        },
        {
          "name": "Change Password",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"old_password\": \"currentPassword123\",\n  \"new_password\": \"newSecurePassword456\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/change-password",
              "host": ["{{base_url}}"],
              "path": ["users", "change-password"]
            },
            "description": "Change user password.\n\n**Request Body Fields:**\n- `old_password` (string, required): Current password (6-100 characters)\n- `new_password` (string, required): New password (6-100 characters)\n\n**Response:**\n```json\n{\n  \"message\": \"Password changed successfully\"\n}\n```\n\n**Error Responses:**\n- `400`: Invalid old password\n- `422`: New password doesn't meet requirements\n- `401`: Invalid access token\n\n**Password Requirements:**\n- Minimum 6 characters\n- Maximum 100 characters\n- Should contain mix of letters, numbers, and special characters (recommended)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Restaurant Management",
      "description": "Restaurant CRUD operations and management endpoints",
      "item": [
        {
          "name": "Create Restaurant",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"The Italian Corner\",\n  \"phone\": \"+1234567890\",\n  \"about\": \"Authentic Italian cuisine with fresh ingredients and traditional recipes passed down through generations.\",\n  \"tags\": [\"Italian\", \"Pizza\", \"Pasta\", \"Fine Dining\", \"Family Friendly\"],\n  \"logo_image\": \"https://example.com/logo.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/restaurants",
              "host": ["{{base_url}}"],
              "path": ["restaurants"]
            },
            "description": "Create a new restaurant.\n\n**Request Body Fields:**\n- `name` (string, required): Restaurant name\n- `phone` (string, required): Restaurant phone number\n- `about` (string, optional): Restaurant description\n- `tags` (array, optional): Array of restaurant tags/categories\n- `logo_image` (string, optional): URL to restaurant logo image\n\n**Automatic Fields:**\n- `manager_id`: Set from authenticated user\n- `slug`: Generated from restaurant name\n- `verification_status`: Set to \"pending\"\n- `average_rating`: Initialized to 0\n- `view_count`: Initialized to 0\n\n**Response:**\n```json\n{\n  \"id\": \"restaurant_id\",\n  \"slug\": \"the-italian-corner\",\n  \"name\": \"The Italian Corner\",\n  \"manager_id\": \"user_id\",\n  \"phone\": \"+1234567890\",\n  \"about\": \"Restaurant description\",\n  \"tags\": [\"Italian\", \"Pizza\"],\n  \"verification_status\": \"pending\",\n  \"average_rating\": 0,\n  \"view_count\": 0,\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"updated_at\": \"2024-01-15T10:30:00Z\"\n}\n```"
          },
          "response": [
            {
              "name": "201 Created",
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [ { "key": "Content-Type", "value": "application/json" } ],
              "body": "{\n  \"id\": \"65f1c4e7a2b3c4d5e6f7a8b9\",\n  \"slug\": \"the-italian-corner\",\n  \"name\": \"The Italian Corner\",\n  \"manager_id\": \"65f1c4e7a2b3c4d5e6f7a111\",\n  \"phone\": \"+1234567890\",\n  \"about\": \"Authentic Italian cuisine\",\n  \"tags\": [\"Italian\", \"Pizza\"],\n  \"verification_status\": \"pending\",\n  \"average_rating\": 0,\n  \"view_count\": 0,\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"updated_at\": \"2024-01-15T10:30:00Z\"\n}"
            },
            {
              "name": "400 Bad Request",
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [ { "key": "Content-Type", "value": "application/json" } ],
              "body": "{\n  \"message\": \"invalid input\",\n  \"error\": \"name is required\"\n}"
            },
            {
              "name": "401 Unauthorized",
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "json",
              "header": [ { "key": "Content-Type", "value": "application/json" } ],
              "body": "{\n  \"message\": \"unauthorized\"\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 201) {",
                  "  const json = pm.response.json();",
                  "  pm.test('has id and slug', function () {",
                  "    pm.expect(json).to.have.property('id');",
                  "    pm.expect(json).to.have.property('slug');",
                  "  });",
                  "  pm.environment.set('restaurant_id', json.id);",
                  "  pm.environment.set('restaurant_slug', json.slug);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Restaurant by Slug",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/restaurants/:slug",
              "host": ["{{base_url}}"],
              "path": ["restaurants", ":slug"],
              "variable": [
                {
                  "key": "slug",
                  "value": "the-italian-corner",
                  "description": "Restaurant slug (URL-friendly name)"
                }
              ]
            },
            "description": "Get restaurant details by slug.\n\n**Path Parameters:**\n- `slug` (string, required): Restaurant slug (URL-friendly identifier)\n\n**Response:**\n```json\n{\n  \"id\": \"restaurant_id\",\n  \"slug\": \"the-italian-corner\",\n  \"name\": \"The Italian Corner\",\n  \"manager_id\": \"user_id\",\n  \"phone\": \"+1234567890\",\n  \"menu_id\": \"menu_id\",\n  \"about\": \"Restaurant description\",\n  \"logo_image\": \"https://example.com/logo.jpg\",\n  \"tags\": [\"Italian\", \"Pizza\", \"Pasta\"],\n  \"verification_status\": \"verified\",\n  \"average_rating\": 4.5,\n  \"view_count\": 1250,\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"updated_at\": \"2024-01-20T14:20:00Z\"\n}\n```\n\n**Error Responses:**\n- `404`: Restaurant not found\n\n**Notes:**\n- This endpoint is public (no authentication required)\n- Increments view count on each request\n- Returns full restaurant details"
          },
          "response": [
            {
              "name": "200 OK",
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [ { "key": "Content-Type", "value": "application/json" } ],
              "body": "{\n  \"id\": \"65f1c4e7a2b3c4d5e6f7a8b9\",\n  \"slug\": \"the-italian-corner\",\n  \"name\": \"The Italian Corner\",\n  \"manager_id\": \"65f1c4e7a2b3c4d5e6f7a111\",\n  \"phone\": \"+1234567890\",\n  \"menu_id\": null,\n  \"about\": \"Authentic Italian cuisine\",\n  \"logo_image\": \"https://example.com/logo.jpg\",\n  \"tags\": [\"Italian\", \"Pizza\"],\n  \"verification_status\": \"verified\",\n  \"average_rating\": 4.5,\n  \"view_count\": 1251,\n  \"created_at\": \"2024-01-15T10:30:00Z\",\n  \"updated_at\": \"2024-01-20T14:20:00Z\"\n}"
            },
            {
              "name": "404 Not Found",
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "json",
              "header": [ { "key": "Content-Type", "value": "application/json" } ],
              "body": "{\n  \"message\": \"restaurant not found\"\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('returns requested slug', function () {",
                  "  const json = pm.response.json();",
                  "  pm.expect(json.slug).to.eql(pm.request.url.variables.get('slug'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Update Restaurant",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"The Italian Corner - Updated\",\n  \"phone\": \"+1234567890\",\n  \"about\": \"Updated description - Authentic Italian cuisine with fresh ingredients and traditional recipes. Now with expanded menu and outdoor seating.\",\n  \"tags\": [\"Italian\", \"Pizza\", \"Pasta\", \"Fine Dining\", \"Family Friendly\", \"Outdoor Seating\"],\n  \"logo_image\": \"https://example.com/updated-logo.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/restaurants/:slug",
              "host": ["{{base_url}}"],
              "path": ["restaurants", ":slug"],
              "variable": [
                {
                  "key": "slug",
                  "value": "the-italian-corner",
                  "description": "Restaurant slug"
                }
              ]
            },
            "description": "Update restaurant information.\n\n**Path Parameters:**\n- `slug` (string, required): Restaurant slug\n\n**Request Body Fields:**\n- `name` (string, optional): Updated restaurant name\n- `phone` (string, optional): Updated phone number\n- `about` (string, optional): Updated description\n- `tags` (array, optional): Updated tags array\n- `logo_image` (string, optional): Updated logo URL\n\n**Authorization:**\n- Only restaurant manager/owner can update\n- Admin users can update any restaurant\n\n**Response:**\n```json\n{\n  \"message\": \"Restaurant updated successfully\",\n  \"data\": {\n    \"id\": \"restaurant_id\",\n    \"slug\": \"the-italian-corner-updated\",\n    \"name\": \"The Italian Corner - Updated\",\n    \"updated_at\": \"2024-01-20T15:45:00Z\"\n  }\n}\n```\n\n**Notes:**\n- Slug is regenerated if name changes\n- Update timestamp is automatically set\n- Verification status may be reset if significant changes are made"
          },
          "response": []
        },
        {
          "name": "Delete Restaurant",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/restaurants/:id",
              "host": ["{{base_url}}"],
              "path": ["restaurants", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "restaurant_object_id",
                  "description": "Restaurant MongoDB ObjectID"
                }
              ]
            },
            "description": "Delete a restaurant (soft delete).\n\n**Path Parameters:**\n- `id` (string, required): Restaurant MongoDB ObjectID (24-character hex string)\n\n**Authorization:**\n- Only restaurant manager/owner can delete their restaurant\n- Admin users can delete any restaurant\n\n**Response:**\n```json\n{\n  \"message\": \"Restaurant deleted successfully\"\n}\n```\n\n**Error Responses:**\n- `404`: Restaurant not found\n- `403`: Not authorized to delete this restaurant\n- `400`: Invalid ObjectID format\n\n**Notes:**\n- This is a soft delete (sets `is_deleted` flag)\n- Restaurant data is preserved for audit purposes\n- Associated menus and items are also soft deleted\n- Operation is irreversible for non-admin users"
          },
          "response": []
        },
        {
          "name": "Get Restaurant Branches",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/restaurants/:slug/branches?page=1&pageSize=10",
              "host": ["{{base_url}}"],
              "path": ["restaurants", ":slug", "branches"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number (default: 1)"
                },
                {
                  "key": "pageSize",
                  "value": "10",
                  "description": "Items per page (default: 10, max: 100)"
                }
              ],
              "variable": [
                {
                  "key": "slug",
                  "value": "mcdonalds",
                  "description": "Restaurant slug"
                }
              ]
            },
            "description": "Get all branches of a restaurant by slug with pagination.\n\n**Path Parameters:**\n- `slug` (string, required): Restaurant slug\n\n**Query Parameters:**\n- `page` (integer, optional): Page number (default: 1)\n- `pageSize` (integer, optional): Items per page (default: 10, max: 100)\n\n**Response:**\n```json\n{\n  \"data\": [\n    {\n      \"id\": \"branch_1_id\",\n      \"slug\": \"mcdonalds\",\n      \"name\": \"McDonald's - Downtown\",\n      \"phone\": \"+1234567890\",\n      \"location\": {\n        \"street\": \"123 Main St\",\n        \"city\": \"New York\",\n        \"state\": \"NY\",\n        \"postal_code\": \"10001\",\n        \"country\": \"USA\"\n      },\n      \"verification_status\": \"verified\",\n      \"average_rating\": 4.2,\n      \"view_count\": 850\n    }\n  ],\n  \"pagination\": {\n    \"page\": 1,\n    \"pageSize\": 10,\n    \"total\": 25,\n    \"totalPages\": 3,\n    \"hasNext\": true,\n    \"hasPrev\": false\n  }\n}\n```\n\n**Use Cases:**\n- Display all branches of a restaurant chain\n- Location-based restaurant search\n- Branch comparison and selection"
          },
          "response": []
        },
        {
          "name": "Get Unique Restaurants",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/restaurants?page=1&pageSize=20",
              "host": ["{{base_url}}"],
              "path": ["restaurants"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number (default: 1)"
                },
                {
                  "key": "pageSize",
                  "value": "20",
                  "description": "Items per page (default: 10, max: 100)"
                }
              ]
            },
            "description": "Get list of unique restaurants (one per restaurant brand/name) with pagination.\n\n**Query Parameters:**\n- `page` (integer, optional): Page number (default: 1)\n- `pageSize` (integer, optional): Items per page (default: 10, max: 100)\n\n**Response:**\n```json\n{\n  \"data\": [\n    {\n      \"id\": \"restaurant_id\",\n      \"slug\": \"the-italian-corner\",\n      \"name\": \"The Italian Corner\",\n      \"manager_id\": \"user_id\",\n      \"phone\": \"+1234567890\",\n      \"about\": \"Authentic Italian cuisine\",\n      \"logo_image\": \"https://example.com/logo.jpg\",\n      \"tags\": [\"Italian\", \"Pizza\", \"Pasta\"],\n      \"verification_status\": \"verified\",\n      \"average_rating\": 4.5,\n      \"view_count\": 1250,\n      \"branch_count\": 3\n    }\n  ],\n  \"pagination\": {\n    \"page\": 1,\n    \"pageSize\": 20,\n    \"total\": 150,\n    \"totalPages\": 8,\n    \"hasNext\": true,\n    \"hasPrev\": false\n  }\n}\n```\n\n**Notes:**\n- Returns one representative restaurant per unique slug/brand\n- Includes branch count for restaurants with multiple locations\n- Sorted by popularity (view count + rating)\n- Perfect for restaurant discovery and browsing"
          },
          "response": [
            {
              "name": "200 OK",
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [ { "key": "Content-Type", "value": "application/json" } ],
              "body": "{\n  \"data\": [ { \n    \"id\": \"65f1c4e7a2b3c4d5e6f7a8b9\", \n    \"slug\": \"the-italian-corner\", \n    \"name\": \"The Italian Corner\", \n    \"branch_count\": 3 \n  } ],\n  \"pagination\": { \n    \"page\": 1, \n    \"pageSize\": 20, \n    \"total\": 1, \n    \"totalPages\": 1, \n    \"hasNext\": false, \n    \"hasPrev\": false \n  }\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('has data array', function () {",
                  "  const json = pm.response.json();",
                  "  pm.expect(json).to.have.property('data');",
                  "  pm.expect(json.data).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Menu Management",
      "description": "Menu and menu item management endpoints (Future Implementation)",
      "item": [
        {
          "name": "Create Menu",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"restaurant_id\": \"restaurant_id\",\n  \"name\": \"Main Menu\",\n  \"description\": \"Our signature dishes and specialties\",\n  \"is_active\": true,\n  \"categories\": [\n    {\n      \"name\": \"Appetizers\",\n      \"description\": \"Start your meal with our delicious appetizers\",\n      \"order\": 1\n    },\n    {\n      \"name\": \"Main Courses\",\n      \"description\": \"Hearty main dishes\",\n      \"order\": 2\n    },\n    {\n      \"name\": \"Desserts\",\n      \"description\": \"Sweet endings to your meal\",\n      \"order\": 3\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/menus",
              "host": ["{{base_url}}"],
              "path": ["menus"]
            },
            "description": "**[FUTURE FEATURE]** Create a new menu for a restaurant.\n\nThis endpoint will allow restaurant managers to create structured menus with categories and organization.\n\n**Planned Features:**\n- Menu versioning and scheduling\n- Category management\n- Menu templates\n- Seasonal menu support\n- Multi-language menu support"
          },
          "response": []
        },
        {
          "name": "Get Menu",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/menus/:menuId",
              "host": ["{{base_url}}"],
              "path": ["menus", ":menuId"],
              "variable": [
                {
                  "key": "menuId",
                  "value": "menu_id"
                }
              ]
            },
            "description": "**[FUTURE FEATURE]** Get menu details with all items and categories.\n\n**Planned Response Structure:**\n```json\n{\n  \"id\": \"menu_id\",\n  \"restaurant_id\": \"restaurant_id\",\n  \"name\": \"Main Menu\",\n  \"description\": \"Our signature dishes\",\n  \"categories\": [\n    {\n      \"name\": \"Appetizers\",\n      \"items\": [\n        {\n          \"id\": \"item_id\",\n          \"name\": \"Caesar Salad\",\n          \"description\": \"Fresh romaine lettuce with Caesar dressing\",\n          \"price\": 12.99,\n          \"image\": \"https://example.com/caesar-salad.jpg\",\n          \"allergens\": [\"dairy\", \"eggs\"],\n          \"dietary_info\": [\"vegetarian\"]\n        }\n      ]\n    }\n  ]\n}\n```"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Menu Items",
      "description": "Individual menu item management endpoints (Future Implementation)",
      "item": [
        {
          "name": "Create Menu Item",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"menu_id\": \"menu_id\",\n  \"category_id\": \"category_id\",\n  \"name\": \"Margherita Pizza\",\n  \"description\": \"Classic pizza with fresh mozzarella, tomatoes, and basil\",\n  \"price\": 18.99,\n  \"preparation_time\": 15,\n  \"is_available\": true,\n  \"ingredients\": [\n    \"Pizza dough\",\n    \"Tomato sauce\",\n    \"Fresh mozzarella\",\n    \"Fresh basil\",\n    \"Olive oil\"\n  ],\n  \"allergens\": [\"gluten\", \"dairy\"],\n  \"dietary_info\": [\"vegetarian\"],\n  \"nutrition\": {\n    \"calories\": 280,\n    \"protein\": 12,\n    \"carbs\": 35,\n    \"fat\": 10\n  },\n  \"variants\": [\n    {\n      \"name\": \"Small\",\n      \"price_modifier\": -3.00\n    },\n    {\n      \"name\": \"Large\",\n      \"price_modifier\": 4.00\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url}}/menu-items",
              "host": ["{{base_url}}"],
              "path": ["menu-items"]
            },
            "description": "**[FUTURE FEATURE]** Create a new menu item.\n\n**Planned Features:**\n- Rich item descriptions with images\n- Nutritional information\n- Allergen and dietary restriction tracking\n- Item variants (sizes, customizations)\n- Availability scheduling\n- Pricing tiers and discounts\n- Item popularity tracking"
          },
          "response": []
        },
        {
          "name": "Update Menu Item",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Margherita Pizza - Chef's Special\",\n  \"description\": \"Classic pizza with fresh mozzarella, tomatoes, and basil - now with artisanal ingredients\",\n  \"price\": 19.99,\n  \"is_available\": true,\n  \"special_offer\": {\n    \"type\": \"discount\",\n    \"value\": 15,\n    \"valid_until\": \"2024-02-01T23:59:59Z\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/menu-items/:itemId",
              "host": ["{{base_url}}"],
              "path": ["menu-items", ":itemId"],
              "variable": [
                {
                  "key": "itemId",
                  "value": "item_id"
                }
              ]
            },
            "description": "**[FUTURE FEATURE]** Update menu item details.\n\n**Planned Features:**\n- Real-time availability updates\n- Dynamic pricing\n- Special offers and promotions\n- Seasonal item management\n- A/B testing for descriptions and pricing"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Reviews & Ratings",
      "description": "Restaurant review and rating system endpoints (Future Implementation)",
      "item": [
        {
          "name": "Create Review",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"restaurant_id\": \"restaurant_id\",\n  \"rating\": 5,\n  \"title\": \"Excellent Italian Experience!\",\n  \"comment\": \"The pasta was absolutely delicious and the service was outstanding. The ambiance was perfect for a romantic dinner. Highly recommended!\",\n  \"visit_date\": \"2024-01-15T19:00:00Z\",\n  \"photos\": [\n    \"https://example.com/review-photo-1.jpg\",\n    \"https://example.com/review-photo-2.jpg\"\n  ],\n  \"categories\": {\n    \"food_quality\": 5,\n    \"service\": 5,\n    \"ambiance\": 4,\n    \"value_for_money\": 4\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/reviews",
              "host": ["{{base_url}}"],
              "path": ["reviews"]
            },
            "description": "**[FUTURE FEATURE]** Create a restaurant review.\n\n**Planned Features:**\n- Multi-criteria ratings (food, service, ambiance, value)\n- Photo uploads with reviews\n- Review verification system\n- Helpful/unhelpful voting\n- Review response from restaurant owners\n- Spam and fake review detection"
          },
          "response": []
        },
        {
          "name": "Get Restaurant Reviews",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/restaurants/:restaurantId/reviews?page=1&pageSize=10&sort=newest&rating=all",
              "host": ["{{base_url}}"],
              "path": ["restaurants", ":restaurantId", "reviews"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "pageSize",
                  "value": "10"
                },
                {
                  "key": "sort",
                  "value": "newest",
                  "description": "newest, oldest, highest_rated, lowest_rated, most_helpful"
                },
                {
                  "key": "rating",
                  "value": "all",
                  "description": "all, 5, 4, 3, 2, 1"
                }
              ],
              "variable": [
                {
                  "key": "restaurantId",
                  "value": "restaurant_id"
                }
              ]
            },
            "description": "**[FUTURE FEATURE]** Get reviews for a restaurant with filtering and sorting.\n\n**Planned Features:**\n- Advanced filtering (rating, date range, verified reviews)\n- Multiple sorting options\n- Review summary and statistics\n- Sentiment analysis of reviews\n- Photo gallery from reviews"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Staff Management",
      "description": "Restaurant staff management endpoints (Future Implementation)",
      "item": [
        {
          "name": "Add Staff Member",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"restaurant_id\": \"restaurant_id\",\n  \"user_email\": \"staff@example.com\",\n  \"role\": \"server\",\n  \"permissions\": [\n    \"manage_orders\",\n    \"view_menu\",\n    \"handle_payments\"\n  ],\n  \"shift_schedule\": {\n    \"monday\": {\"start\": \"09:00\", \"end\": \"17:00\"},\n    \"tuesday\": {\"start\": \"09:00\", \"end\": \"17:00\"},\n    \"wednesday\": {\"start\": \"09:00\", \"end\": \"17:00\"}\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/restaurants/:restaurantId/staff",
              "host": ["{{base_url}}"],
              "path": ["restaurants", ":restaurantId", "staff"],
              "variable": [
                {
                  "key": "restaurantId",
                  "value": "restaurant_id"
                }
              ]
            },
            "description": "**[FUTURE FEATURE]** Add a staff member to a restaurant.\n\n**Planned Features:**\n- Role-based permissions\n- Shift scheduling\n- Performance tracking\n- Training module integration\n- Staff communication tools"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Analytics & Reports",
      "description": "Business analytics and reporting endpoints (Future Implementation)",
      "item": [
        {
          "name": "Restaurant Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/restaurants/:restaurantId/analytics?period=30d&metrics=all",
              "host": ["{{base_url}}"],
              "path": ["restaurants", ":restaurantId", "analytics"],
              "query": [
                {
                  "key": "period",
                  "value": "30d",
                  "description": "7d, 30d, 90d, 1y"
                },
                {
                  "key": "metrics",
                  "value": "all",
                  "description": "all, views, ratings, reviews, revenue"
                }
              ],
              "variable": [
                {
                  "key": "restaurantId",
                  "value": "restaurant_id"
                }
              ]
            },
            "description": "**[FUTURE FEATURE]** Get restaurant analytics and performance metrics.\n\n**Planned Metrics:**\n- Page views and engagement\n- Rating trends\n- Review sentiment analysis\n- Popular menu items\n- Peak hours and seasons\n- Revenue analytics (if integrated with POS)\n- Customer demographics\n- Competitor analysis"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Admin",
      "description": "Administrative endpoints for system management (Future Implementation)",
      "item": [
        {
          "name": "Verify Restaurant",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{admin_access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"verification_status\": \"verified\",\n  \"verification_notes\": \"All documents verified. Restaurant meets all requirements.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/restaurants/:restaurantId/verify",
              "host": ["{{base_url}}"],
              "path": ["admin", "restaurants", ":restaurantId", "verify"],
              "variable": [
                {
                  "key": "restaurantId",
                  "value": "restaurant_id"
                }
              ]
            },
            "description": "**[FUTURE FEATURE]** Admin endpoint to verify or reject restaurant applications.\n\n**Planned Features:**\n- Document verification workflow\n- Verification notes and history\n- Bulk verification operations\n- Verification reminder system\n- Automated verification checks"
          },
          "response": []
        },
        {
          "name": "System Health Check",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{admin_access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/admin/health",
              "host": ["{{base_url}}"],
              "path": ["admin", "health"]
            },
            "description": "**[FUTURE FEATURE]** System health check and monitoring.\n\n**Planned Health Metrics:**\n- Database connectivity\n- External service status (email, storage, etc.)\n- API response times\n- Error rates\n- System resource usage\n- Recent error logs"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script for automatic token management",
          "",
          "// Check if we have stored tokens",
          "let accessToken = pm.environment.get('access_token');",
          "let refreshToken = pm.environment.get('refresh_token');",
          "let tokenExpiry = pm.environment.get('token_expiry');",
          "",
          "// Function to check if token is expired",
          "function isTokenExpired(expiry) {",
          "    if (!expiry) return true;",
          "    return new Date().getTime() > parseInt(expiry);",
          "}",
          "",
          "// If access token is expired but refresh token exists, refresh it",
          "if (isTokenExpired(tokenExpiry) && refreshToken) {",
          "    console.log('Access token expired, attempting to refresh...');",
          "    ",
          "    pm.sendRequest({",
          "        url: pm.environment.get('base_url') + '/auth/refresh',",
          "        method: 'POST',",
          "        header: {",
          "            'Content-Type': 'application/json'",
          "        },",
          "        body: {",
          "            mode: 'raw',",
          "            raw: JSON.stringify({",
          "                'refresh_token': refreshToken",
          "            })",
          "        }",
          "    }, function (err, response) {",
          "        if (err) {",
          "            console.log('Error refreshing token:', err);",
          "            return;",
          "        }",
          "        ",
          "        if (response.code === 200) {",
          "            const responseJson = response.json();",
          "            ",
          "            // Store new tokens",
          "            pm.environment.set('access_token', responseJson.access_token);",
          "            pm.environment.set('refresh_token', responseJson.refresh_token);",
          "            ",
          "            // Calculate expiry time (15 minutes from now by default)",
          "            const expiryTime = new Date().getTime() + (15 * 60 * 1000);",
          "            pm.environment.set('token_expiry', expiryTime.toString());",
          "            ",
          "            console.log('Tokens refreshed successfully');",
          "        } else {",
          "            console.log('Failed to refresh token:', response.json());",
          "            // Clear expired tokens",
          "            pm.environment.unset('access_token');",
          "            pm.environment.unset('refresh_token');",
          "            pm.environment.unset('token_expiry');",
          "        }",
          "    });",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for token management",
          "",
          "// Store tokens if login/register/refresh response contains them",
          "if (pm.response.code === 200 || pm.response.code === 201) {",
          "    const responseJson = pm.response.json();",
          "    ",
          "    // Check if response contains tokens",
          "    if (responseJson.access_token) {",
          "        pm.environment.set('access_token', responseJson.access_token);",
          "        console.log('Access token stored');",
          "        ",
          "        // Calculate expiry time (15 minutes from now by default)",
          "        const expiryTime = new Date().getTime() + (15 * 60 * 1000);",
          "        pm.environment.set('token_expiry', expiryTime.toString());",
          "    }",
          "    ",
          "    if (responseJson.refresh_token) {",
          "        pm.environment.set('refresh_token', responseJson.refresh_token);",
          "        console.log('Refresh token stored');",
          "    }",
          "    ",
          "    // Store user ID if available",
          "    if (responseJson.user && responseJson.user.id) {",
          "        pm.environment.set('user_id', responseJson.user.id);",
          "    } else if (responseJson.id) {",
          "        pm.environment.set('user_id', responseJson.id);",
          "    }",
          "}",
          "",
          "// Basic response validation",
          "pm.test('Response should be valid JSON', function () {",
          "    pm.response.to.be.json;",
          "});",
          "",
          "pm.test('Response time should be reasonable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Status code tests based on method",
          "const method = pm.request.method;",
          "const statusCode = pm.response.code;",
          "",
          "if (method === 'POST' && pm.request.url.path.includes('register')) {",
          "    pm.test('Registration should return 201', function () {",
          "        pm.response.to.have.status(201);",
          "    });",
          "} else if (method === 'POST' && statusCode === 200) {",
          "    pm.test('POST request successful', function () {",
          "        pm.response.to.have.status(200);",
          "    });",
          "} else if (method === 'GET' && statusCode === 200) {",
          "    pm.test('GET request successful', function () {",
          "        pm.response.to.have.status(200);",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080/api/v1",
      "type": "string"
    },
    {
      "key": "access_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "refresh_token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    }
  ]
}
