// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/RealEskalate/G6-MenuMate/internal/domain"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// IRestaurantUsecase is an autogenerated mock type for the IRestaurantUsecase type
type IRestaurantUsecase struct {
	mock.Mock
}

// CreateRestaurant provides a mock function with given fields: ctx, r, images
func (_m *IRestaurantUsecase) CreateRestaurant(ctx context.Context, r *domain.Restaurant, images map[string]*multipart.FileHeader) error {
	ret := _m.Called(ctx, r, images)

	if len(ret) == 0 {
		panic("no return value specified for CreateRestaurant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Restaurant, map[string]*multipart.FileHeader) error); ok {
		r0 = rf(ctx, r, images)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRestaurant provides a mock function with given fields: ctx, id, manager
func (_m *IRestaurantUsecase) DeleteRestaurant(ctx context.Context, id string, manager string) error {
	ret := _m.Called(ctx, id, manager)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRestaurant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, id, manager)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRestaurantByOldSlug provides a mock function with given fields: ctx, slug
func (_m *IRestaurantUsecase) GetRestaurantByOldSlug(ctx context.Context, slug string) (*domain.Restaurant, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetRestaurantByOldSlug")
	}

	var r0 *domain.Restaurant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Restaurant, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Restaurant); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Restaurant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestaurantBySlug provides a mock function with given fields: ctx, slug
func (_m *IRestaurantUsecase) GetRestaurantBySlug(ctx context.Context, slug string) (*domain.Restaurant, error) {
	ret := _m.Called(ctx, slug)

	if len(ret) == 0 {
		panic("no return value specified for GetRestaurantBySlug")
	}

	var r0 *domain.Restaurant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Restaurant, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Restaurant); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Restaurant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBranchesBySlug provides a mock function with given fields: ctx, slug, page, pageSize
func (_m *IRestaurantUsecase) ListBranchesBySlug(ctx context.Context, slug string, page int, pageSize int) ([]*domain.Restaurant, int64, error) {
	ret := _m.Called(ctx, slug, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListBranchesBySlug")
	}

	var r0 []*domain.Restaurant
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]*domain.Restaurant, int64, error)); ok {
		return rf(ctx, slug, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []*domain.Restaurant); ok {
		r0 = rf(ctx, slug, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Restaurant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) int64); ok {
		r1 = rf(ctx, slug, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, slug, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ListUniqueRestaurants provides a mock function with given fields: ctx, page, pageSize
func (_m *IRestaurantUsecase) ListUniqueRestaurants(ctx context.Context, page int, pageSize int) ([]*domain.Restaurant, int64, error) {
	ret := _m.Called(ctx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for ListUniqueRestaurants")
	}

	var r0 []*domain.Restaurant
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*domain.Restaurant, int64, error)); ok {
		return rf(ctx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*domain.Restaurant); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Restaurant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int64); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateRestaurant provides a mock function with given fields: ctx, r
func (_m *IRestaurantUsecase) UpdateRestaurant(ctx context.Context, r *domain.Restaurant) error {
	ret := _m.Called(ctx, r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRestaurant")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Restaurant) error); ok {
		r0 = rf(ctx, r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIRestaurantUsecase creates a new instance of IRestaurantUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRestaurantUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRestaurantUsecase {
	mock := &IRestaurantUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
